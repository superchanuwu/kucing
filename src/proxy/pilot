use crate::config::Config;
use std::pin::Pin;
use std::task::{Context, Poll};
use bytes::{BufMut, BytesMut};
use futures_util::Stream;
use pin_project_lite::pin_project;
use tokio::io::{AsyncRead, AsyncReadExt, AsyncWrite, AsyncWriteExt, ReadBuf};
use worker::*;
use crate::dns::resolve_doh_in_worker;  // Mengimpor fungsi DoH

pin_project! {
    pub struct ProxyStream<'a> {
        pub config: Config,
        pub ws: &'a WebSocket,
        pub buffer: BytesMut,
        #[pin]
        pub events: EventStream<'a>,
    }
}

impl<'a> ProxyStream<'a> {
    pub fn new(config: Config, ws: &'a WebSocket, events: EventStream<'a>) -> Self {
        let buffer = BytesMut::new();

        Self {
            config,
            ws,
            buffer,
            events,
        }
    }

    pub async fn fill_buffer_until(&mut self, n: usize) -> std::io::Result<()> {
        use futures_util::StreamExt;

        while self.buffer.len() < n {
            match self.events.next().await {
                Some(Ok(WebsocketEvent::Message(msg))) => {
                    if let Some(data) = msg.bytes() {
                        self.buffer.put_slice(&data);
                    }
                }
                Some(Ok(WebsocketEvent::Close(_))) => {
                    break;
                }
                Some(Err(e)) => {
                    return Err(std::io::Error::new(std::io::ErrorKind::Other, e.to_string()));
                }
                None => {
                    break;
                }
            }
        }

        Ok(())
    }

    pub fn peek_buffer(&self, n: usize) -> &[u8] {
        let len = self.buffer.len().min(n);
        &self.buffer[..len]
    }

    pub async fn process(&mut self) -> Result<()> {
        self.fill_buffer_until(62).await?;
        let peeked_buffer = self.peek_buffer(62);

        // Deteksi protokol berdasarkan buffer
        if peeked_buffer[0] == 0xF1 {
            console_log!("DNS query detected!");
            return self.process_dns_query().await;
        } else if peeked_buffer.starts_with(b"GET") || peeked_buffer.starts_with(b"POST") {
            console_log!("HTTP/HTTPS request detected!");
            return self.process_http_https().await;
        } else if peeked_buffer[0] == 0 {
            console_log!("VLESS detected!");
            return self.process_vless().await;
        } else if peeked_buffer[0] == 1 || peeked_buffer[0] == 3 {
            console_log!("Shadowsocks detected!");
            return self.process_shadowsocks().await;
        } else if peeked_buffer[56] == 13 && peeked_buffer[57] == 10 {
            console_log!("Trojan detected!");
            return self.process_trojan().await;
        } else {
            console_log!("VMess detected!");
            return self.process_vmess().await;
        }
    }

    pub async fn process_dns_query(&mut self) -> Result<()> {
        // Implementasi untuk menangani DNS query
        console_log!("Processing DNS query...");
        let dns_query = self.read_dns_query().await?;
        let resolved_ip = resolve_doh_in_worker(&dns_query).await?;
        self.write_dns_response(resolved_ip).await?;
        Ok(())
    }

    pub async fn process_http_https(&mut self) -> Result<()> {
        // Implementasi untuk menangani HTTP/HTTPS
        console_log!("Processing HTTP/HTTPS request...");
        // Proses request HTTP/HTTPS di sini
        self.write(&self.buffer).await?;  // Menulis kembali data (contoh)
        Ok(())
    }

    pub async fn handle_tcp_outbound(&mut self, addr: String, port: u16) -> Result<()> {
        console_log!("resolving {}:{} via DoH...", addr, port);
        let ip = resolve_doh_in_worker(&addr)
            .await
            .map_err(|e| Error::RustError(format!("DNS resolve failed: {}", e)))?;

        console_log!("connecting to upstream {}:{}", ip, port);
        let mut remote_socket = Socket::builder()
            .connect(ip.to_string(), port)
            .map_err(|e| Error::RustError(e.to_string()))?;

        remote_socket
            .opened()
            .await
            .map_err(|e| Error::RustError(e.to_string()))?;

        tokio::io::copy_bidirectional(self, &mut remote_socket)
            .await
            .map_err(|e| Error::RustError(e.to_string()))?;

        Ok(())
    }

    pub async fn handle_udp_outbound(&mut self) -> Result<()> {
        let mut buff = vec![0u8; 65535];

        let n = self.read(&mut buff).await?;
        let data = &buff[..n];
        if crate::dns::doh(data).await.is_ok() {
            self.write(&data).await?;
        };
        Ok(())
    }
}

// Implementasi untuk AsyncRead dan AsyncWrite tetap dipertahankan
